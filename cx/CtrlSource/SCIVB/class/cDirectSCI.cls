VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
  Persistable = 0  'NotPersistable
  DataBindingBehavior = 0  'vbNone
  DataSourceBehavior  = 0  'vbNone
  MTSTransactionMode  = 0  'NotAnMTSObject
END
Attribute VB_Name = "cDirectSCI"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
Option Explicit

'+==============================================================+
'| This class serves two purposes.  It makes it easier to       |
'| update the autogenerated functions which Scintilla supports, |
'| and it keeps the list in the autocomplete list from being to |
'| long.  All these functions are direct access functions for   |
'| Scintilla.  If you need to access core features of scintilla |
'| You would call it like this:                                 |
'| YourSCIVBControlName.DirectSCI.CoreFunction                  |
'+==============================================================+
Public SCI As Long

Public Function SendEditor(ByVal Msg As Long, Optional ByVal wParam As Long = 0, Optional ByVal lParam = 0) As Long
    If VarType(lParam) = vbString Then
        SendEditor = SendMessageString(SCI, Msg, IIf(wParam = 0, CLng(wParam), wParam), CStr(lParam))
    Else
        SendEditor = SendMessage(SCI, Msg, IIf(wParam = 0, CLng(wParam), wParam), IIf(lParam = 0, CLng(lParam), lParam))
    End If
End Function

'+++++++++ All Code Below is AutoGenerated Using scintilla.iface+++++++++

'#######################################################################
'######################## Start Autogenerated Code #####################
'#######################################################################

' ## First line may be used for shbang
' ## This file defines the interface to Scintilla
' ## The License.txt file describes the conditions under which this software may be distributed.
' ## to the next feature definition.
' ## should be used to tie these entities together.
' ## for possibly #defining the constants
' ## can be determined by calling with a NULL (0) pointer.
' ## For Scintilla.h
' # as many EM_ messages can be used although that use is deprecated.
' # Add text to the document at current position.
Public Sub AddText(length As Long, Text As String)
  Call SendEditor(2001, length, Text)
End Sub

Public Function GetCurPos() As Long
  GetCurPos = SendEditor(SCI_GETCURRENTPOS)
End Function

Public Function CharAtPos(Position As Long) As Long
    CharAtPos = SendMessage(SCI, SCI_GETCHARAT, Position, CLng(0))
End Function

Public Sub SetSelText(strVal As String)
  ReplaceSel strVal
End Sub

' # Add array of cells to document.
Public Sub AddStyledText(length As Long)
  Call SendEditor(2002, length, 0)
End Sub
' # Insert string at a position.
Public Sub InsertText(pos As Long, Text As String)
  Call SendEditor(2003, pos, Text)
End Sub
' # Delete all text in the document.
Public Sub ClearAll()
  Call SendEditor(2004, 0, 0)
End Sub
' # Set all style bytes to 0, remove all folding information.
Public Sub ClearDocumentStyle()
  Call SendEditor(2005, 0, 0)
End Sub
' # Returns the number of characters in the document.
Public Function GetLength() As Long
  GetLength = SendEditor(2006, 0, 0)
End Function

' # Returns the character byte at the position.
Public Function GetCharAt(pos As Long) As Long
  GetCharAt = SendEditor(2007, pos, 0)
End Function

' # Returns the position of the caret.
' # Returns the position of the opposite end of the selection to the caret.
' # Returns the style byte at the position.
Public Function GetStyleAt(pos As Long) As Long
  GetStyleAt = SendEditor(2010, pos, 0)
End Function

' # Redoes the next action on the undo history.
Public Sub Redo()
  Call SendEditor(2011, 0, 0)
  SetFocus
End Sub
' # history and discarding them.
Public Sub SetUndoCollection(collectUndo As Boolean)
  Call SendEditor(2012, collectUndo, 0)
End Sub
' # Select all the text in the document.
Public Sub SelectAll()
  Call SendEditor(2013, 0, 0)
End Sub
' # at which the document was saved.
Public Sub SetSavePoint()
  Call SendEditor(2014, 0, 0)
End Sub
' # Returns the number of bytes in the buffer not including terminating NULs.
Public Function GetStyledText() As Long
  GetStyledText = SendEditor(2015, 0, 0)
End Function
' # Are there any redoable actions in the undo history?
Public Function CanRedo() As Boolean
  CanRedo = SendEditor(2016, 0, 0)
End Function
' # Retrieve the line number at which a particular marker is located.
Public Function MarkerLineFromHandle(handle As Long) As Long
  MarkerLineFromHandle = SendEditor(2017, handle, 0)
End Function
' # Delete a marker.
Public Sub MarkerDeleteHandle(handle As Long)
  Call SendEditor(2018, handle, 0)
End Sub
' # Is undo history being collected?
Public Function GetUndoCollection() As Boolean
  GetUndoCollection = SendEditor(2019, 0, 0)
End Function
' # Returns one of SCWS_* constants.
Public Function GetViewWS() As Long
  GetViewWS = SendEditor(2020, 0, 0)
End Function

' # Make white space characters invisible, always visible or visible outside indentation.
Public Sub SetViewWS(viewWS As Long)
  Call SendEditor(2021, viewWS, 0)
End Sub
' # Find the position from a point within the window.
' # INVALID_POSITION if not close to text.
' # Set caret to start of a line and ensure it is visible.
Public Sub GotoLine(line As Long)
  Call SendEditor(2024, line, 0)
End Sub
' # Set caret to a position and ensure it is visible.
Public Sub GotoPos(pos As Long)
  Call SendEditor(2025, pos, 0)
End Sub
' # end of the selection from the caret.
Public Sub SetAnchor(posAnchor As Long)
  Call SendEditor(2026, posAnchor, 0)
End Sub
' # Returns the index of the caret on the line.
Public Function GetCurLine(length As Long, Text As String) As Long
  GetCurLine = SendEditor(2027, length, Text)
End Function
' # Retrieve the position of the last correctly styled character.
' # Convert all line endings in the document to one mode.
Public Sub ConvertEOLs(EOLMode As Long)
  Call SendEditor(2029, EOLMode, 0)
End Sub
' # Retrieve the current end of line mode - one of CRLF, CR, or LF.
Public Function GetEOLMode() As Long
  GetEOLMode = SendEditor(2030, 0, 0)
End Function

' # Set the current end of line mode.
Public Sub SetEOLMode(EOLMode As Long)
  Call SendEditor(2031, EOLMode, 0)
End Sub
' # The styling mask can be used to protect some bits in each styling byte from modification.
Public Sub StartStyling(pos As Long, mask As Long)
  Call SendEditor(2032, pos, mask)
End Sub
' # and move the current styling position to after this newly styled segment.
Public Sub SetStyling(length As Long, Style As Long)
  Call SendEditor(2033, length, Style)
End Sub
' # Is drawing done first into a buffer or direct to the screen?
Public Function GetBufferedDraw() As Boolean
  GetBufferedDraw = SendEditor(2034, 0, 0)
End Function
' # before drawing it to the screen to avoid flicker.
Public Sub SetBufferedDraw(buffered As Boolean)
  Call SendEditor(2035, buffered, 0)
End Sub
' # Change the visible size of a tab to be a multiple of the width of a space character.
Public Sub SetTabWidth(TabWidth As Long)
  Call SendEditor(2036, TabWidth, 0)
End Sub
' # Retrieve the visible size of a tab.
Public Function GetTabWidth() As Long
  GetTabWidth = SendEditor(2121, 0, 0)
End Function

' # This is the same value as CP_UTF8 in Windows
' # The SC_CP_DBCS value can be used to indicate a DBCS mode for GTK+.
' # The SC_CP_UTF8 value can be used to enter Unicode mode.
Public Sub SetCodePage(codePage As Long)
  Call SendEditor(2037, codePage, 0)
End Sub
' # more colours. This may lead to ugly displays.
Public Sub SetUsePalette(usePalette As Boolean)
  Call SendEditor(2039, usePalette, 0)
End Sub
' # Shapes used for outlining column.
' # Invisible mark that only sets the line background color.
' # Markers used for outlining column.
' # Set the symbol used for a particular marker number.
Public Sub MarkerDefine(markerNumber As Long, markerSymbol As Long)
  Call SendEditor(2040, markerNumber, markerSymbol)
End Sub
' # Set the foreground colour used for a particular marker number.
Public Sub MarkerSetFore(markerNumber As Long, fore As Long)
  Call SendEditor(2041, markerNumber, fore)
End Sub
' # Set the background colour used for a particular marker number.
Public Sub MarkerSetBack(markerNumber As Long, back As Long)
  Call SendEditor(2042, markerNumber, back)
End Sub
' # Add a marker to a line, returning an ID which can be used to find or delete the marker.
Public Function MarkerAdd(line As Long, markerNumber As Long) As Long
  MarkerAdd = SendEditor(2043, line, markerNumber)
End Function
' # Delete a marker from a line.
Public Sub MarkerDelete(line As Long, markerNumber As Long)
  Call SendEditor(2044, line, markerNumber)
End Sub
' # Delete all markers with a particular number from all lines.
Public Sub MarkerDeleteAll(markerNumber As Long)
  Call SendEditor(2045, markerNumber, 0)
End Sub
' # Get a bit mask of all the markers set on a line.
Public Function MarkerGet(line As Long) As Long
  MarkerGet = SendEditor(2046, line, 0)
End Function
' # Find the next line after lineStart that includes a marker in mask.
Public Function MarkerNext(lineStart As Long, markerMask As Long) As Long
  MarkerNext = SendEditor(2047, lineStart, markerMask)
End Function
' # Find the previous line before lineStart that includes a marker in mask.
Public Function MarkerPrevious(lineStart As Long, markerMask As Long) As Long
  MarkerPrevious = SendEditor(2048, lineStart, markerMask)
End Function
' # Define a marker from a pixmap.
Public Sub MarkerDefinePixmap(markerNumber As Long, pixmap As String)
  Call SendEditor(2049, markerNumber, pixmap)
End Sub
' # Add a set of markers to a line.
Public Sub MarkerAddSet(line As Long, sets As Long)
  Call SendEditor(2466, line, sets)
End Sub
' # Set a margin to be either numeric or symbolic.
Public Sub SetMarginTypeN(margin As Long, marginType As Long)
  Call SendEditor(2240, margin, marginType)
End Sub
' # Retrieve the type of a margin.
Public Function GetMarginTypeN(margin As Long) As Long
  GetMarginTypeN = SendEditor(2241, margin, 0)
End Function

' # Set the width of a margin to a width expressed in pixels.
Public Sub SetMarginWidthN(margin As Long, pixelWidth As Long)
  Call SendEditor(2242, margin, pixelWidth)
End Sub
' # Retrieve the width of a margin in pixels.
Public Function GetMarginWidthN(margin As Long) As Long
  GetMarginWidthN = SendEditor(2243, margin, 0)
End Function

' # Set a mask that determines which markers are displayed in a margin.
Public Sub SetMarginMaskN(margin As Long, mask As Long)
  Call SendEditor(2244, margin, mask)
End Sub
' # Retrieve the marker mask of a margin.
Public Function GetMarginMaskN(margin As Long) As Long
  GetMarginMaskN = SendEditor(2245, margin, 0)
End Function

' # Make a margin sensitive or insensitive to mouse clicks.
Public Sub SetMarginSensitiveN(margin As Long, sensitive As Boolean)
  Call SendEditor(2246, margin, sensitive)
End Sub
' # Retrieve the mouse click sensitivity of a margin.
Public Function GetMarginSensitiveN(margin As Long) As Boolean
  GetMarginSensitiveN = SendEditor(2247, margin, 0)
End Function
' # Styles 38 and 39 are for future use.
' # The values are the same as the Windows *_CHARSET values.
' # Clear all the styles and make equivalent to the global default style.
Public Sub StyleClearAll()
  Call SendEditor(2050, 0, 0)
End Sub
' # Set the foreground colour of a style.
Public Sub StyleSetFore(Style As Long, fore As Long)
  Call SendEditor(2051, Style, fore)
End Sub
' # Set the background colour of a style.
Public Sub StyleSetBack(Style As Long, back As Long)
  Call SendEditor(2052, Style, back)
End Sub
' # Set a style to be bold or not.
Public Sub StyleSetBold(Style As Long, bold As Boolean)
  Call SendEditor(2053, Style, bold)
End Sub
' # Set a style to be italic or not.
Public Sub StyleSetItalic(Style As Long, italic As Boolean)
  Call SendEditor(2054, Style, italic)
End Sub
' # Set the size of characters of a style.
Public Sub StyleSetSize(Style As Long, sizePoints As Long)
  Call SendEditor(2055, Style, sizePoints)
End Sub
' # Set the font of a style.
Public Sub StyleSetFont(Style As Long, fontName As String)
  Call SendEditor(2056, Style, fontName)
End Sub
' # Set a style to have its end of line filled or not.
Public Sub StyleSetEOLFilled(Style As Long, filled As Boolean)
  Call SendEditor(2057, Style, filled)
End Sub
' # Reset the default style to its state at startup
Public Sub StyleResetDefault()
  Call SendEditor(2058, 0, 0)
End Sub
' # Set a style to be underlined or not.
Public Sub StyleSetUnderline(Style As Long, underline As Boolean)
  Call SendEditor(2059, Style, underline)
End Sub
' # Set a style to be mixed case, or to force upper or lower case.
Public Sub StyleSetCase(Style As Long, caseForce As Long)
  Call SendEditor(2060, Style, caseForce)
End Sub
' # Set the character set of the font in a style.
Public Sub StyleSetCharacterSet(Style As Long, characterSet As Long)
  Call SendEditor(2066, Style, characterSet)
End Sub
' # Set a style to be a hotspot or not.
Public Sub StyleSetHotSpot(Style As Long, hotspot As Boolean)
  Call SendEditor(2409, Style, hotspot)
End Sub
' # Set the foreground colour of the selection and whether to use this setting.
Public Sub SetSelFore(useSetting As Boolean, fore As Long)
  Call SendEditor(2067, useSetting, fore)
End Sub
' # Set the background colour of the selection and whether to use this setting.
Public Sub SetSelBack(useSetting As Boolean, back As Long)
  Call SendEditor(2068, useSetting, back)
End Sub
' # Set the foreground colour of the caret.
Public Sub SetCaretFore(fore As Long)
  Call SendEditor(2069, fore, 0)
End Sub
' # When key+modifier combination km is pressed perform msg.
Public Sub AssignCmdKey(keyDefinition As Long, Msg As Long)
  Call SendEditor(2070, keyDefinition, Msg)
End Sub
' # When key+modifier combination km is pressed do nothing.
Public Sub ClearCmdKey(KeyDef As Long)
  Call SendEditor(2071, KeyDef, 0)
End Sub
' # Drop all key mappings.
Public Sub ClearAllCmdKeys()
  Call SendEditor(2072, 0, 0)
End Sub
' # Set the styles for a segment of the document.
Public Sub SetStylingEx(length As Long, styles As String)
  Call SendEditor(2073, length, styles)
End Sub
' # Set a style to be visible or not.
Public Sub StyleSetVisible(Style As Long, visible As Boolean)
  Call SendEditor(2074, Style, visible)
End Sub
' # Get the time in milliseconds that the caret is on and off.
Public Function GetCaretPeriod() As Long
  GetCaretPeriod = SendEditor(2075, 0, 0)
End Function

' # Get the time in milliseconds that the caret is on and off. 0 = steady on.
Public Sub SetCaretPeriod(periodMilliseconds As Long)
  Call SendEditor(2076, periodMilliseconds, 0)
End Sub
' # First sets deaults like SetCharsDefault.
Public Sub SetWordChars(characters As String)
  Call SendEditor(2077, 0, characters)
End Sub
' # May be nested.
Public Sub BeginUndoAction()
  Call SendEditor(2078, 0, 0)
End Sub
' # End a sequence of actions that is undone and redone as a unit.
Public Sub EndUndoAction()
  Call SendEditor(2079, 0, 0)
End Sub
' # Set an indicator to plain, squiggle or TT.
Public Sub IndicStyleSet(indic As Long, Style As Long)
  Call SendEditor(2080, indic, Style)
End Sub
' # Retrieve the style of an indicator.
Public Function IndicGetStyle(indic As Long) As Long
  IndicGetStyle = SendEditor(2081, indic, 0)
End Function

' # Set the foreground colour of an indicator.
Public Sub IndicSetFore(indic As Long, fore As Long)
  Call SendEditor(2082, indic, fore)
End Sub
' # Retrieve the foreground colour of an indicator.
' # Set the foreground colour of all whitespace and whether to use this setting.
Public Sub SetWhitespaceFore(useSetting As Boolean, fore As Long)
  Call SendEditor(2084, useSetting, fore)
End Sub
' # Set the background colour of all whitespace and whether to use this setting.
Public Sub SetWhitespaceBack(useSetting As Boolean, back As Long)
  Call SendEditor(2085, useSetting, back)
End Sub
' # is used to expand the possible states.
Public Sub StyleSetBits(bits As Long)
  Call SendEditor(2090, bits, 0)
End Sub
' # Retrieve number of bits in style bytes used to hold the lexical state.
Public Function GetStyleBits() As Long
  GetStyleBits = SendEditor(2091, 0, 0)
End Function

' # Used to hold extra styling information for each line.
Public Sub SetLineState(line As Long, State As Long)
  Call SendEditor(2092, line, State)
End Sub
' # Retrieve the extra styling information for a line.
Public Function GetLineState(line As Long) As Long
  GetLineState = SendEditor(2093, line, 0)
End Function

' # Retrieve the last line number that has line state.
Public Function GetMaxLineState() As Long
  GetMaxLineState = SendEditor(2094, 0, 0)
End Function

' # Is the background of the line containing the caret in a different colour?
Public Function GetCaretLineVisible() As Boolean
  GetCaretLineVisible = SendEditor(2095, 0, 0)
End Function
' # Display the background of the line containing the caret in a different colour.
Public Sub SetCaretLineVisible(show As Boolean)
  Call SendEditor(2096, show, 0)
End Sub
' # Get the colour of the background of the line containing the caret.
' # Set the colour of the background of the line containing the caret.
Public Sub SetCaretLineBack(back As Long)
  Call SendEditor(2098, back, 0)
End Sub
' # Experimental feature, currently buggy.
Public Sub StyleSetChangeable(Style As Long, changeable As Boolean)
  Call SendEditor(2099, Style, changeable)
End Sub
' # the caret should be used to provide context.
Public Sub AutoCShow(lenEntered As Long, itemList As String)
  Call SendEditor(2100, lenEntered, itemList)
End Sub
' # Remove the auto-completion list from the screen.
Public Sub AutoCCancel()
  Call SendEditor(2101, 0, 0)
End Sub
' # Is there an auto-completion list visible?
Public Function AutoCActive() As Boolean
  AutoCActive = SendEditor(2102, 0, 0)
End Function
' # Retrieve the position of the caret when the auto-completion list was displayed.
' # User has selected an item so remove the list and insert the selection.
Public Sub AutoCComplete()
  Call SendEditor(2104, 0, 0)
End Sub
' # Define a set of character that when typed cancel the auto-completion list.
Public Sub AutoCStops(characterSet As String)
  Call SendEditor(2105, 0, characterSet)
End Sub
' # Default is space but can be changed if items contain space.
Public Sub AutoCSetSeparator(separatorCharacter As Long)
  Call SendEditor(2106, separatorCharacter, 0)
End Sub
' # Retrieve the auto-completion list separator character.
Public Function AutoCGetSeparator() As Long
  AutoCGetSeparator = SendEditor(2107, 0, 0)
End Function

' # Select the item in the auto-completion list that starts with a string.
Public Sub AutoCSelect(Text As String)
  Call SendEditor(2108, 0, Text)
End Sub
' # position before where the box was created.
Public Sub AutoCSetCancelAtStart(Cancel As Boolean)
  Call SendEditor(2110, Cancel, 0)
End Sub
' # Retrieve whether auto-completion cancelled by backspacing before start.
Public Function AutoCGetCancelAtStart() As Boolean
  AutoCGetCancelAtStart = SendEditor(2111, 0, 0)
End Function
' # choose the selected item.
Public Sub AutoCSetFillUps(characterSet As String)
  Call SendEditor(2112, 0, characterSet)
End Sub
' # Should a single item auto-completion list automatically choose the item.
Public Sub AutoCSetChooseSingle(chooseSingle As Boolean)
  Call SendEditor(2113, chooseSingle, 0)
End Sub
' # Retrieve whether a single item auto-completion list automatically choose the item.
Public Function AutoCGetChooseSingle() As Boolean
  AutoCGetChooseSingle = SendEditor(2114, 0, 0)
End Function
' # Set whether case is significant when performing auto-completion searches.
Public Sub AutoCSetIgnoreCase(ignoreCase As Boolean)
  Call SendEditor(2115, ignoreCase, 0)
End Sub
' # Retrieve state of ignore case flag.
Public Function AutoCGetIgnoreCase() As Boolean
  AutoCGetIgnoreCase = SendEditor(2116, 0, 0)
End Function
' # Display a list of strings and send notification when user chooses one.
Public Sub UserListShow(listType As Long, itemList As String)
  Call SendEditor(2117, listType, itemList)
End Sub
' # Set whether or not autocompletion is hidden automatically when nothing matches.
Public Sub AutoCSetAutoHide(autoHide As Boolean)
  Call SendEditor(2118, autoHide, 0)
End Sub
' # Retrieve whether or not autocompletion is hidden automatically when nothing matches.
Public Function AutoCGetAutoHide() As Boolean
  AutoCGetAutoHide = SendEditor(2119, 0, 0)
End Function
' # after the inserted text upon completion.
Public Sub AutoCSetDropRestOfWord(dropRestOfWord As Boolean)
  Call SendEditor(2270, dropRestOfWord, 0)
End Sub
' # after the inserted text upon completion.
Public Function AutoCGetDropRestOfWord() As Boolean
  AutoCGetDropRestOfWord = SendEditor(2271, 0, 0)
End Function
' # Register an XPM image for use in autocompletion lists.
Public Sub RegisterImage(types As Long, xpmData As String)
  Call SendEditor(2405, types, xpmData)
End Sub
' # Clear all the registered XPM images.
Public Sub ClearRegisteredImages()
  Call SendEditor(2408, 0, 0)
End Sub
' # Retrieve the auto-completion list type-separator character.
Public Function AutoCGetTypeSeparator() As Long
  AutoCGetTypeSeparator = SendEditor(2285, 0, 0)
End Function

' # Default is '?' but can be changed if items contain '?'.
Public Sub AutoCSetTypeSeparator(separatorCharacter As Long)
  Call SendEditor(2286, separatorCharacter, 0)
End Sub
' # Set to 0 to autosize to fit longest item, which is the default.
Public Sub AutoCSetMaxWidth(characterCount As Long)
  Call SendEditor(2208, characterCount, 0)
End Sub
' # Get the maximum width, in characters, of auto-completion and user lists.
Public Function AutoCGetMaxWidth() As Long
  AutoCGetMaxWidth = SendEditor(2209, 0, 0)
End Function

' # The default is 5 rows.
Public Sub AutoCSetMaxHeight(rowCount As Long)
  Call SendEditor(2210, rowCount, 0)
End Sub
' # Set the maximum height, in rows, of auto-completion and user lists.
Public Function AutoCGetMaxHeight() As Long
  AutoCGetMaxHeight = SendEditor(2211, 0, 0)
End Function

' # Set the number of spaces used for one level of indentation.
Public Sub SetIndent(indentSize As Long)
  Call SendEditor(2122, indentSize, 0)
End Sub
' # Retrieve indentation size.
Public Function GetIndent() As Long
  GetIndent = SendEditor(2123, 0, 0)
End Function

' # it will use a combination of tabs and spaces.
Public Sub SetUseTabs(useTabs As Boolean)
  Call SendEditor(2124, useTabs, 0)
End Sub
' # Retrieve whether tabs will be used in indentation.
Public Function GetUseTabs() As Boolean
  GetUseTabs = SendEditor(2125, 0, 0)
End Function
' # Change the indentation of a line to a number of columns.
Public Sub SetLineIndentation(line As Long, indentSize As Long)
  Call SendEditor(2126, line, indentSize)
End Sub
' # Retrieve the number of columns that a line is indented.
Public Function GetLineIndentation(line As Long) As Long
  GetLineIndentation = SendEditor(2127, line, 0)
End Function

' # Retrieve the position before the first non indentation character on a line.
' # Retrieve the column number of a position, taking tab width into account.
Public Function GetColumn()
  GetColumn = SendMessage(SCI, SCI_GETCOLUMN, GetCurPos, CLng(0))
End Function

' # Show or hide the horizontal scroll bar.
Public Sub SetHScrollBar(show As Boolean)
  Call SendEditor(2130, show, 0)
End Sub
' # Is the horizontal scroll bar visible?
Public Function GetHScrollBar() As Boolean
  GetHScrollBar = SendEditor(2131, 0, 0)
End Function
' # Show or hide indentation guides.
Public Sub SetIndentationGuides(show As Boolean)
  Call SendEditor(2132, show, 0)
End Sub
' # Are the indentation guides visible?
Public Function GetIndentationGuides() As Boolean
  GetIndentationGuides = SendEditor(2133, 0, 0)
End Function
' # 0 = no highlighted guide.
Public Sub SetHighlightGuide(Column As Long)
  Call SendEditor(2134, Column, 0)
End Sub
' # Get the highlighted indentation guide column.
Public Function GetHighlightGuide() As Long
  GetHighlightGuide = SendEditor(2135, 0, 0)
End Function

' # Get the position after the last visible characters on a line.
Public Function GetLineEndPosition(line As Long) As Long
  GetLineEndPosition = SendEditor(2136, line, 0)
End Function

' # Get the code page used to interpret the bytes of the document as characters.
Public Function GetCodePage() As Long
  GetCodePage = SendEditor(2137, 0, 0)
End Function

' # Get the foreground colour of the caret.
' # In palette mode?
Public Function GetUsePalette() As Boolean
  GetUsePalette = SendEditor(2139, 0, 0)
End Function
' # In read-only mode?
Public Function GetReadOnly() As Boolean
  GetReadOnly = SendEditor(2140, 0, 0)
End Function
' # Sets the position of the caret.
Public Sub SetCurrentPos(pos As Long)
  Call SendEditor(2141, pos, 0)
End Sub
' # Sets the position that starts the selection - this becomes the anchor.
Public Sub SetSelectionStart(pos As Long)
  Call SendEditor(2142, pos, 0)
End Sub
' # Returns the position at the start of the selection.
' # Sets the position that ends the selection - this becomes the currentPosition.
Public Sub SetSelectionEnd(pos As Long)
  Call SendEditor(2144, pos, 0)
End Sub
' # Returns the position at the end of the selection.
' # Sets the print magnification added to the point size of each style for printing.
Public Sub SetPrintMagnification(magnification As Long)
  Call SendEditor(2146, magnification, 0)
End Sub
' # Returns the print magnification.
Public Function GetPrintMagnification() As Long
  GetPrintMagnification = SendEditor(2147, 0, 0)
End Function

' # PrintColourMode - use same colours as screen.
' # PrintColourMode - invert the light value of each style for printing.
' # PrintColourMode - force black text on white background for printing.
' # PrintColourMode - text stays coloured, but all background is forced to be white for printing.
' # PrintColourMode - only the default-background is forced to be white for printing.
' # Modify colours when printing for clearer printed text.
Public Sub SetPrintColourMode(mode As Long)
  Call SendEditor(2148, mode, 0)
End Sub
' # Returns the print colour mode.
Public Function GetPrintColourMode() As Long
  GetPrintColourMode = SendEditor(2149, 0, 0)
End Function

' # Find some text in the document.
' # On Windows, will draw the document into a display context such as a printer.
' # Retrieve the display line at the top of the display.
Public Function GetFirstVisibleLine() As Long
  GetFirstVisibleLine = SendEditor(2152, 0, 0)
End Function

' # Returns the length of the line.
Public Function GetLine(line As Long, Text As String) As Long
  GetLine = SendEditor(2153, line, Text)
End Function
' # Returns the number of lines in the document. There is always at least one.
Public Function GetLineCount() As Long
  GetLineCount = SendEditor(2154, 0, 0)
End Function

' # Sets the size in pixels of the left margin.
Public Sub SetMarginLeft(pixelWidth As Long)
  Call SendEditor(2155, 0, pixelWidth)
End Sub
' # Returns the size in pixels of the left margin.
Public Function GetMarginLeft() As Long
  GetMarginLeft = SendEditor(2156, 0, 0)
End Function

' # Sets the size in pixels of the right margin.
Public Sub SetMarginRight(pixelWidth As Long)
  Call SendEditor(2157, 0, pixelWidth)
End Sub
' # Returns the size in pixels of the right margin.
Public Function GetMarginRight() As Long
  GetMarginRight = SendEditor(2158, 0, 0)
End Function

' # Is the document different from when it was last saved?
Public Function GetModify() As Boolean
  GetModify = SendEditor(2159, 0, 0)
End Function
' # Select a range of text.
Public Sub SetSel(starts As Long, ends As Long)
  Call SendEditor(2160, starts, ends)
End Sub

Public Function GetSelectionEnd() As Long
  GetSelectionEnd = SendMessage(SCI, SCI_GETSELECTIONEND, CLng(0), CLng(0))
End Function

Public Function GetSelectionStart() As Long
  GetSelectionStart = SendMessage(SCI, SCI_GETSELECTIONSTART, CLng(0), CLng(0))
End Function

Public Function GetSelectionLength() As Long
    GetSelectionLength = GetSelectionEnd - GetSelectionStart
End Function

' # Return the length of the text.
Public Function GetSelText() As String
  Dim bByte() As Byte
  Dim lPtr As Long
  Dim strTmp As String
  Dim i As Long
  lPtr = GetSelectionLength
  ReDim Preserve bByte(0 To lPtr)
  SendMessage SCI, SCI_GETSELTEXT, 0, VarPtr(bByte(0))
  strTmp = ""
  strTmp = StrConv(bByte, vbUnicode)
  GetSelText = strTmp
End Function

' # Return the length of the text.
Public Function GetTextRange() As Long
  GetTextRange = SendEditor(2162, 0, 0)
End Function
' # Draw the selection in normal style or with selection highlighted.
Public Sub HideSelection(normal As Boolean)
  Call SendEditor(2163, normal, 0)
End Sub
' # Retrieve the x value of the point in the window where a position is displayed.
Public Function PointXFromPosition(pos As Long) As Long
  PointXFromPosition = SendEditor(2164, 0, pos)
End Function
' # Retrieve the y value of the point in the window where a position is displayed.
Public Function PointYFromPosition(pos As Long) As Long
  PointYFromPosition = SendEditor(2165, 0, pos)
End Function
' # Retrieve the line containing a position.
Public Function LineFromPosition(pos As Long) As Long
  LineFromPosition = SendEditor(2166, pos, 0)
End Function
' # Retrieve the position at the start of a line.
' # Scroll horizontally and vertically.
Public Sub LineScroll(columns As Long, lines As Long)
  Call SendEditor(2168, columns, lines)
End Sub
' # Ensure the caret is visible.
Public Sub ScrollCaret()
  Call SendEditor(2169, 0, 0)
End Sub
' # Replace the selected text with the argument text.
Public Sub ReplaceSel(Text As String)
  Call SendEditor(2170, 0, Text)
End Sub
' # Set to read only or read write.
Public Sub SetReadOnly(ReadOnly As Boolean)
  Call SendEditor(2171, ReadOnly, 0)
End Sub
' # Null operation.
Public Sub Nulls()
  Call SendEditor(2172, 0, 0)
End Sub
' # Will a paste succeed?
Public Function CanPaste() As Boolean
  CanPaste = SendEditor(2173, 0, 0)
End Function
' # Are there any undoable actions in the undo history?
Public Function CanUndo() As Boolean
  CanUndo = SendEditor(2174, 0, 0)
End Function
' # Delete the undo history.
Public Sub EmptyUndoBuffer()
  Call SendEditor(2175, 0, 0)
End Sub
' # Undo one action in the undo history.
Public Sub Undo()
  Call SendEditor(2176, 0, 0)
  SetFocus
End Sub
' # Cut the selection to the clipboard.
Public Sub Cut()
  Call SendEditor(2177, 0, 0)
  SetFocus
End Sub
' # Copy the selection to the clipboard.
Public Sub Copy()
  Call SendEditor(2178, 0, 0)
  SetFocus
End Sub
' # Paste the contents of the clipboard into the document replacing the selection.
Public Sub Paste()
  Call SendEditor(2179, 0, 0)
  SetFocus
End Sub
' # Clear the selection.
Public Sub Clear()
  Call SendEditor(2180, 0, 0)
  SetFocus
End Sub
' # Replace the contents of the document with the argument text.
Public Sub SetText(Text As String)
  Call SendEditor(2181, 0, Text)
  SetFocus
End Sub
' # Returns number of characters retrieved.
Public Function GetText() As String
  Dim numChar As Long
  Dim txt As String
  numChar = SendMessage(SCI, SCI_GETLENGTH, 0, 0) + 1
  txt = Space(numChar)
  SendMessageString SCI, SCI_GETTEXT, numChar, txt
  If Right(txt, 1) = Chr(0) Then
    txt = Left(txt, Len(txt) - 1)
  End If
  GetText = txt 'Left(txt, Len(txt) - 1)
End Function

' # Retrieve the number of characters in the document.
Public Function GetTextLength() As Long
  GetTextLength = SendEditor(2183, 0, 0)
End Function

' # Retrieve a pointer to a function that processes messages for this Scintilla.
Public Function GetDirectFunction() As Long
  GetDirectFunction = SendEditor(2184, 0, 0)
End Function

' # the function returned by GetDirectFunction.
Public Function GetDirectPointer() As Long
  GetDirectPointer = SendEditor(2185, 0, 0)
End Function

' # Set to overtype (true) or insert mode.
Public Sub SetOvertype(OverType As Boolean)
  Call SendEditor(2186, OverType, 0)
End Sub
' # Returns true if overtype mode is active otherwise false is returned.
Public Function GetOvertype() As Boolean
  GetOvertype = SendEditor(2187, 0, 0)
End Function
' # Set the width of the insert mode caret.
Public Sub SetCaretWidth(pixelWidth As Long)
  Call SendEditor(2188, pixelWidth, 0)
End Sub
' # Returns the width of the insert mode caret.
Public Function GetCaretWidth() As Long
  GetCaretWidth = SendEditor(2189, 0, 0)
End Function

' # document without affecting the scroll position.
Public Sub SetTargetStart(pos As Long)
  Call SendEditor(2190, pos, 0)
End Sub
' # Get the position that starts the target.
' # document without affecting the scroll position.
Public Sub SetTargetEnd(pos As Long)
  Call SendEditor(2192, pos, 0)
End Sub
' # Get the position that ends the target.
' # Returns the length of the replacement text.
Public Function ReplaceTarget(length As Long, Text As String) As Long
  ReplaceTarget = SendEditor(2194, length, Text)
End Function
' # caused by processing the \d patterns.
Public Function ReplaceTargetRE(length As Long, Text As String) As Long
  ReplaceTargetRE = SendEditor(2195, length, Text)
End Function
' # Returns length of range or -1 for failure in which case target is not moved.
Public Function SearchInTarget(length As Long, Text As String) As Long
  SearchInTarget = SendEditor(2197, length, Text)
End Function
' # Set the search flags used by SearchInTarget.
Public Sub SetSearchFlags(flags As Long)
  Call SendEditor(2198, flags, 0)
End Sub
' # Get the search flags used by SearchInTarget.
Public Function GetSearchFlags() As Long
  GetSearchFlags = SendEditor(2199, 0, 0)
End Function

' # Show a call tip containing a definition near position pos.
Public Sub CallTipShow(pos As Long, definition As String)
  Call SendEditor(2200, pos, definition)
End Sub
' # Remove the call tip from the screen.
Public Sub CallTipCancel()
  Call SendEditor(2201, 0, 0)
End Sub
' # Is there an active call tip?
Public Function CallTipActive() As Boolean
  CallTipActive = SendEditor(2202, 0, 0)
End Function
' # Retrieve the position where the caret was before displaying the call tip.
' # Highlight a segment of the definition.
Public Sub CallTipSetHlt(starts As Long, ends As Long)
  Call SendEditor(2204, starts, ends)
End Sub
' # Set the background colour for the call tip.
Public Sub CallTipSetBack(back As Long)
  Call SendEditor(2205, back, 0)
End Sub
' # Set the foreground colour for the call tip.
Public Sub CallTipSetFore(fore As Long)
  Call SendEditor(2206, fore, 0)
End Sub
' # Set the foreground colour for the highlighted part of the call tip.
Public Sub CallTipSetForeHlt(fore As Long)
  Call SendEditor(2207, fore, 0)
End Sub
' # Find the display line of a document line taking hidden lines into account.
Public Function VisibleFromDocLine(line As Long) As Long
  VisibleFromDocLine = SendEditor(2220, line, 0)
End Function
' # Find the document line of a display line taking hidden lines into account.
Public Function DocLineFromVisible(lineDisplay As Long) As Long
  DocLineFromVisible = SendEditor(2221, lineDisplay, 0)
End Function
' # The number of display lines needed to wrap a document line
Public Function WrapCount(line As Long) As Long
  WrapCount = SendEditor(2235, line, 0)
End Function
' # line is a header and whether it is effectively white space.
Public Sub SetFoldLevel(line As Long, level As Long)
  Call SendEditor(2222, line, level)
End Sub
' # Retrieve the fold level of a line.
Public Function GetFoldLevel(line As Long) As Long
  GetFoldLevel = SendEditor(2223, line, 0)
End Function

' # Find the last child line of a header line.
Public Function GetLastChild(line As Long, level As Long) As Long
  GetLastChild = SendEditor(2224, line, level)
End Function

' # Find the parent line of a child line.
Public Function GetFoldParent(line As Long) As Long
  GetFoldParent = SendEditor(2225, line, 0)
End Function

' # Make a range of lines visible.
Public Sub ShowLines(lineStart As Long, LineEnd As Long)
  Call SendEditor(2226, lineStart, LineEnd)
End Sub
' # Make a range of lines invisible.
Public Sub HideLines(lineStart As Long, LineEnd As Long)
  Call SendEditor(2227, lineStart, LineEnd)
End Sub
' # Is a line visible?
Public Function GetLineVisible(line As Long) As Boolean
  GetLineVisible = SendEditor(2228, line, 0)
End Function
' # Show the children of a header line.
Public Sub SetFoldExpanded(line As Long, expanded As Boolean)
  Call SendEditor(2229, line, expanded)
End Sub
' # Is a header line expanded?
Public Function GetFoldExpanded(line As Long) As Boolean
  GetFoldExpanded = SendEditor(2230, line, 0)
End Function
' # Switch a header line between expanded and contracted.
Public Sub ToggleFold(line As Long)
  Call SendEditor(2231, line, 0)
End Sub
' # Ensure a particular line is visible by expanding any header line hiding it.
Public Sub EnsureVisible(line As Long)
  Call SendEditor(2232, line, 0)
End Sub
' # Set some style options for folding.
Public Sub SetFoldFlags(flags As Long)
  Call SendEditor(2233, flags, 0)
End Sub
' # Use the currently set visibility policy to determine which range to display.
Public Sub EnsureVisibleEnforcePolicy(line As Long)
  Call SendEditor(2234, line, 0)
End Sub
' # Sets whether a tab pressed when caret is within indentation indents.
Public Sub SetTabIndents(TabIndents As Boolean)
  Call SendEditor(2260, TabIndents, 0)
End Sub
' # Does a tab pressed when caret is within indentation indent?
Public Function GetTabIndents() As Boolean
  GetTabIndents = SendEditor(2261, 0, 0)
End Function
' # Sets whether a backspace pressed when caret is within indentation unindents.
Public Sub SetBackSpaceUnIndents(bsUnIndents As Boolean)
  Call SendEditor(2262, bsUnIndents, 0)
End Sub
' # Does a backspace pressed when caret is within indentation unindent?
Public Function GetBackSpaceUnIndents() As Boolean
  GetBackSpaceUnIndents = SendEditor(2263, 0, 0)
End Function
' # Sets the time the mouse must sit still to generate a mouse dwell event.
Public Sub SetMouseDwellTime(periodMilliseconds As Long)
  Call SendEditor(2264, periodMilliseconds, 0)
End Sub
' # Retrieve the time the mouse must sit still to generate a mouse dwell event.
Public Function GetMouseDwellTime() As Long
  GetMouseDwellTime = SendEditor(2265, 0, 0)
End Function

' # Get position of start of word.
Public Function WordStartPosition(pos As Long, onlyWordCharacters As Boolean) As Long
  WordStartPosition = SendEditor(2266, pos, onlyWordCharacters)
End Function
' # Get position of end of word.
Public Function WordEndPosition(pos As Long, onlyWordCharacters As Boolean) As Long
  WordEndPosition = SendEditor(2267, pos, onlyWordCharacters)
End Function
' # Sets whether text is word wrapped.
Public Sub SetWrapMode(mode As Long)
  Call SendEditor(2268, mode, 0)
End Sub
' # Retrieve whether text is word wrapped.
Public Function GetWrapMode() As Long
  GetWrapMode = SendEditor(2269, 0, 0)
End Function

' # Set the display mode of visual flags for wrapped lines.
Public Sub SetWrapVisualFlags(wrapVisualFlags As Long)
  Call SendEditor(2460, wrapVisualFlags, 0)
End Sub
' # Retrive the display mode of visual flags for wrapped lines.
Public Function GetWrapVisualFlags() As Long
  GetWrapVisualFlags = SendEditor(2461, 0, 0)
End Function

' # Set the location of visual flags for wrapped lines.
Public Sub SetWrapVisualFlagsLocation(wrapVisualFlagsLocation As Long)
  Call SendEditor(2462, wrapVisualFlagsLocation, 0)
End Sub
' # Retrive the location of visual flags for wrapped lines.
Public Function GetWrapVisualFlagsLocation() As Long
  GetWrapVisualFlagsLocation = SendEditor(2463, 0, 0)
End Function

' # Set the start indent for wrapped lines.
Public Sub SetWrapStartIndent(Indent As Long)
  Call SendEditor(2464, Indent, 0)
End Sub
' # Retrive the start indent for wrapped lines.
Public Function GetWrapStartIndent() As Long
  GetWrapStartIndent = SendEditor(2465, 0, 0)
End Function

' # Sets the degree of caching of layout information.
Public Sub SetLayoutCache(mode As Long)
  Call SendEditor(2272, mode, 0)
End Sub
' # Retrieve the degree of caching of layout information.
Public Function GetLayoutCache() As Long
  GetLayoutCache = SendEditor(2273, 0, 0)
End Function

' # Sets the document width assumed for scrolling.
Public Sub SetScrollWidth(pixelWidth As Long)
  Call SendEditor(2274, pixelWidth, 0)
End Sub
' # Retrieve the document width assumed for scrolling.
Public Function GetScrollWidth() As Long
  GetScrollWidth = SendEditor(2275, 0, 0)
End Function
'
'' # Does not handle tab or control characters.
'Public Function TextWidth(style As Long, text As String) As Long
'  TextWidth = SendEditor(2276, style, text)
'End Function
' # Setting this to false allows scrolling one page below the last line.
Public Sub SetEndAtLastLine(EndAtLastLine As Boolean)
  Call SendEditor(2277, EndAtLastLine, 0)
End Sub
' # line at the bottom of the view.
Public Function GetEndAtLastLine() As Boolean
  GetEndAtLastLine = SendEditor(2278, 0, 0)
End Function
'' # Retrieve the height of a particular line of text in pixels.
'Public Function TextHeight(line As Long) As Long
'  TextHeight = SendEditor(2279, line, 0)
'End Function
' # Show or hide the vertical scroll bar.
Public Sub SetVScrollBar(show As Boolean)
  Call SendEditor(2280, show, 0)
End Sub
' # Is the vertical scroll bar visible?
Public Function GetVScrollBar() As Boolean
  GetVScrollBar = SendEditor(2281, 0, 0)
End Function
' # Append a string to the end of the document without changing the selection.
Public Sub AppendText(length As Long, Text As String)
  Call SendEditor(2282, length, Text)
End Sub
' # Is drawing done in two phases with backgrounds drawn before faoregrounds?
Public Function GetTwoPhaseDraw() As Boolean
  GetTwoPhaseDraw = SendEditor(2283, 0, 0)
End Function
' # and then the foreground. This avoids chopping off characters that overlap the next run.
Public Sub SetTwoPhaseDraw(twoPhase As Boolean)
  Call SendEditor(2284, twoPhase, 0)
End Sub
' # Make the target range start and end be the same as the selection range start and end.
Public Sub TargetFromSelection()
  Call SendEditor(2287, 0, 0)
End Sub
' # Join the lines in the target.
Public Sub LinesJoin()
  Call SendEditor(2288, 0, 0)
End Sub
' # where possible.
Public Sub LinesSplit(pixelWidth As Long)
  Call SendEditor(2289, pixelWidth, 0)
End Sub
' # Set the colours used as a chequerboard pattern in the fold margin
Public Sub SetFoldMarginColour(useSetting As Boolean, back As Long)
  Call SendEditor(2290, useSetting, back)
End Sub
Public Sub SetFoldMarginHiColour(useSetting As Boolean, fore As Long)
  Call SendEditor(2291, useSetting, fore)
End Sub
' ## New messages go here
' # Move caret down one line.
Public Sub LineDown()
  Call SendEditor(2300, 0, 0)
End Sub
' # Move caret down one line extending selection to new caret position.
Public Sub LineDownExtend()
  Call SendEditor(2301, 0, 0)
End Sub
' # Move caret up one line.
Public Sub LineUp()
  Call SendEditor(2302, 0, 0)
End Sub
' # Move caret up one line extending selection to new caret position.
Public Sub LineUpExtend()
  Call SendEditor(2303, 0, 0)
End Sub
' # Move caret left one character.
Public Sub CharLeft()
  Call SendEditor(2304, 0, 0)
End Sub
' # Move caret left one character extending selection to new caret position.
Public Sub CharLeftExtend()
  Call SendEditor(2305, 0, 0)
End Sub
' # Move caret right one character.
Public Sub CharRight()
  Call SendEditor(2306, 0, 0)
End Sub
' # Move caret right one character extending selection to new caret position.
Public Sub CharRightExtend()
  Call SendEditor(2307, 0, 0)
End Sub
' # Move caret left one word.
Public Sub WordLeft()
  Call SendEditor(2308, 0, 0)
End Sub
' # Move caret left one word extending selection to new caret position.
Public Sub WordLeftExtend()
  Call SendEditor(2309, 0, 0)
End Sub
' # Move caret right one word.
Public Sub WordRight()
  Call SendEditor(2310, 0, 0)
End Sub
' # Move caret right one word extending selection to new caret position.
Public Sub WordRightExtend()
  Call SendEditor(2311, 0, 0)
End Sub
' # Move caret to first position on line.
Public Sub Home()
  Call SendEditor(2312, 0, 0)
End Sub
' # Move caret to first position on line extending selection to new caret position.
Public Sub HomeExtend()
  Call SendEditor(2313, 0, 0)
End Sub
' # Move caret to last position on line.
Public Sub LineEnd()
  Call SendEditor(2314, 0, 0)
End Sub
' # Move caret to last position on line extending selection to new caret position.
Public Sub LineEndExtend()
  Call SendEditor(2315, 0, 0)
End Sub
' # Move caret to first position in document.
Public Sub DocumentStart()
  Call SendEditor(2316, 0, 0)
End Sub
' # Move caret to first position in document extending selection to new caret position.
Public Sub DocumentStartExtend()
  Call SendEditor(2317, 0, 0)
End Sub
' # Move caret to last position in document.
Public Sub DocumentEnd()
  Call SendEditor(2318, 0, 0)
End Sub
' # Move caret to last position in document extending selection to new caret position.
Public Sub DocumentEndExtend()
  Call SendEditor(2319, 0, 0)
End Sub
' # Move caret one page up.
Public Sub PageUp()
  Call SendEditor(2320, 0, 0)
End Sub
' # Move caret one page up extending selection to new caret position.
Public Sub PageUpExtend()
  Call SendEditor(2321, 0, 0)
End Sub
' # Move caret one page down.
Public Sub PageDown()
  Call SendEditor(2322, 0, 0)
End Sub
' # Move caret one page down extending selection to new caret position.
Public Sub PageDownExtend()
  Call SendEditor(2323, 0, 0)
End Sub
' # Switch from insert to overtype mode or the reverse.
Public Sub EditToggleOvertype()
  Call SendEditor(2324, 0, 0)
End Sub
' # Cancel any modes such as call tip or auto-completion list display.
Public Sub Cancel()
  Call SendEditor(2325, 0, 0)
End Sub
' # Delete the selection or if no selection, the character before the caret.
Public Sub DeleteBack()
  Call SendEditor(2326, 0, 0)
End Sub
' # If more than one line selected, indent the lines.
Public Sub Indent()
  Call SendEditor(2327, 0, 0)
End Sub
' # Dedent the selected lines.
Public Sub BackTab()
  Call SendEditor(2328, 0, 0)
End Sub
' # Insert a new line, may use a CRLF, CR or LF depending on EOL mode.
Public Sub NewLine()
  Call SendEditor(2329, 0, 0)
End Sub
' # Insert a Form Feed character.
Public Sub FormFeed()
  Call SendEditor(2330, 0, 0)
End Sub
' # If already there move to first character on line.
Public Sub VCHome()
  Call SendEditor(2331, 0, 0)
End Sub
' # Like VCHome but extending selection to new caret position.
Public Sub VCHomeExtend()
  Call SendEditor(2332, 0, 0)
End Sub
' # Magnify the displayed text by increasing the sizes by 1 point.
Public Sub ZoomIn()
  Call SendEditor(2333, 0, 0)
End Sub
' # Make the displayed text smaller by decreasing the sizes by 1 point.
Public Sub ZoomOut()
  Call SendEditor(2334, 0, 0)
End Sub
' # Delete the word to the left of the caret.
Public Sub DelWordLeft()
  Call SendEditor(2335, 0, 0)
End Sub
' # Delete the word to the right of the caret.
Public Sub DelWordRight()
  Call SendEditor(2336, 0, 0)
End Sub
' # Cut the line containing the caret.
Public Sub LineCut()
  Call SendEditor(2337, 0, 0)
End Sub
' # Delete the line containing the caret.
Public Sub LineDelete()
  Call SendEditor(2338, 0, 0)
End Sub
' # Switch the current line with the previous.
Public Sub LineTranspose()
  Call SendEditor(2339, 0, 0)
End Sub
' # Duplicate the current line.
Public Sub LineDuplicate()
  Call SendEditor(2404, 0, 0)
End Sub
' # Transform the selection to lower case.
Public Sub LowerCase()
  Call SendEditor(2340, 0, 0)
End Sub
' # Transform the selection to upper case.
Public Sub UpperCase()
  Call SendEditor(2341, 0, 0)
End Sub
' # Scroll the document down, keeping the caret visible.
Public Sub LineScrollDown()
  Call SendEditor(2342, 0, 0)
End Sub
' # Scroll the document up, keeping the caret visible.
Public Sub LineScrollUp()
  Call SendEditor(2343, 0, 0)
End Sub
' # Will not delete the character before at the start of a line.
Public Sub DeleteBackNotLine()
  Call SendEditor(2344, 0, 0)
End Sub
' # Move caret to first position on display line.
Public Sub HomeDisplay()
  Call SendEditor(2345, 0, 0)
End Sub
' # new caret position.
Public Sub HomeDisplayExtend()
  Call SendEditor(2346, 0, 0)
End Sub
' # Move caret to last position on display line.
Public Sub LineEndDisplay()
  Call SendEditor(2347, 0, 0)
End Sub
' # caret position.
Public Sub LineEndDisplayExtend()
  Call SendEditor(2348, 0, 0)
End Sub
' # or end of the document line, as appropriate for (Home|LineEnd|VCHome)(Extend)?.
Public Sub HomeWrap()
  Call SendEditor(2349, 0, 0)
End Sub
Public Sub HomeWrapExtend()
  Call SendEditor(2450, 0, 0)
End Sub
Public Sub LineEndWrap()
  Call SendEditor(2451, 0, 0)
End Sub
Public Sub LineEndWrapExtend()
  Call SendEditor(2452, 0, 0)
End Sub
Public Sub VCHomeWrap()
  Call SendEditor(2453, 0, 0)
End Sub
Public Sub VCHomeWrapExtend()
  Call SendEditor(2454, 0, 0)
End Sub
' # Copy the line containing the caret.
Public Sub LineCopy()
  Call SendEditor(2455, 0, 0)
End Sub
' # Move the caret inside current view if it's not there already.
Public Sub MoveCaretInsideView()
  Call SendEditor(2401, 0, 0)
End Sub
' # How many characters are on a line, not including end of line characters?
Public Function LineLength(line As Long) As Long
  LineLength = SendEditor(2350, line, 0)
End Function
' # Highlight the characters at two positions.
Public Sub BraceHighlight(pos1 As Long, pos2 As Long)
  Call SendEditor(2351, pos1, pos2)
End Sub
' # Highlight the character at a position indicating there is no matching brace.
Public Sub BraceBadLight(pos As Long)
  Call SendEditor(2352, pos, 0)
End Sub
' # Find the position of a matching brace or INVALID_POSITION if no match.
' # Are the end of line characters visible?
Public Function GetViewEOL() As Boolean
  GetViewEOL = SendEditor(2355, 0, 0)
End Function
' # Make the end of line characters visible or invisible.
Public Sub SetViewEOL(visible As Boolean)
  Call SendEditor(2356, visible, 0)
End Sub
' # Retrieve a pointer to the document object.
Public Function GetDocPointer() As Long
  GetDocPointer = SendEditor(2357, 0, 0)
End Function

' # Change the document object used.
Public Sub SetDocPointer(pointer As Long)
  Call SendEditor(2358, 0, pointer)
End Sub
' # Set which document modification events are sent to the container.
Public Sub SetModEventMask(mask As Long)
  Call SendEditor(2359, mask, 0)
End Sub
' # Retrieve the column number which text should be kept within.
Public Function GetEdgeColumn() As Long
  GetEdgeColumn = SendEditor(2360, 0, 0)
End Function

' # If text goes past the edge then it is highlighted.
Public Sub SetEdgeColumn(Column As Long)
  Call SendEditor(2361, Column, 0)
End Sub
' # Retrieve the edge highlight mode.
Public Function GetEdgeMode() As Long
  GetEdgeMode = SendEditor(2362, 0, 0)
End Function

' # goes beyond it (EDGE_BACKGROUND) or not displayed at all (EDGE_NONE).
Public Sub SetEdgeMode(mode As Long)
  Call SendEditor(2363, mode, 0)
End Sub
' # Retrieve the colour used in edge indication.
' # Change the colour used in edge indication.
Public Sub SetEdgeColour(edgeColour As Long)
  Call SendEditor(2365, edgeColour, 0)
End Sub
' # Sets the current caret position to be the search anchor.
Public Sub SearchAnchor()
  Call SendEditor(2366, 0, 0)
End Sub
' # Does not ensure the selection is visible.
Public Function SearchNext(flags As Long, Text As String) As Long
  SearchNext = SendEditor(2367, flags, Text)
End Function
' # Does not ensure the selection is visible.
Public Function SearchPrev(flags As Long, Text As String) As Long
  SearchPrev = SendEditor(2368, flags, Text)
End Function
' # Retrieves the number of lines completely visible.
Public Function LinesOnScreen() As Long
  LinesOnScreen = SendEditor(2370, 0, 0)
End Function

' # the wrong mouse button.
Public Sub UsePopUp(allowPopUp As Boolean)
  Call SendEditor(2371, allowPopUp, 0)
End Sub
' # Is the selection rectangular? The alternative is the more common stream selection.
Public Function SelectionIsRectangle() As Boolean
  SelectionIsRectangle = SendEditor(2372, 0, 0)
End Function
' # It may be positive to magnify or negative to reduce.
Public Sub SetZoom(Zoom As Long)
  Call SendEditor(2373, Zoom, 0)
End Sub
' # Retrieve the zoom level.
Public Function GetZoom() As Long
  GetZoom = SendEditor(2374, 0, 0)
End Function

' # Starts with reference count of 1 and not selected into editor.
Public Function CreateDocument() As Long
  CreateDocument = SendEditor(2375, 0, 0)
End Function
' # Extend life of document.
Public Sub AddRefDocument(doc As Long)
  Call SendEditor(2376, 0, doc)
End Sub
' # Release a reference to the document, deleting document if it fades to black.
Public Sub ReleaseDocument(doc As Long)
  Call SendEditor(2377, 0, doc)
End Sub
' # Get which document modification events are sent to the container.
Public Function GetModEventMask() As Long
  GetModEventMask = SendEditor(2378, 0, 0)
End Function

' # Change internal focus flag.
Public Sub SetFocus()
  SetFocusEx SCI
  Call SendEditor(2380, True, 0)
End Sub
' # Get internal focus flag.
Public Function GetFocus() As Boolean
  GetFocus = SendEditor(2381, 0, 0)
End Function
' # Change error status - 0 = OK.
Public Sub SetStatus(statusCode As Long)
  Call SendEditor(2382, statusCode, 0)
End Sub
' # Get error status.
Public Function GetStatus() As Long
  GetStatus = SendEditor(2383, 0, 0)
End Function

' # Set whether the mouse is captured when its button is pressed.
Public Sub SetMouseDownCaptures(captures As Boolean)
  Call SendEditor(2384, captures, 0)
End Sub
' # Get whether mouse gets captured.
Public Function GetMouseDownCaptures() As Boolean
  GetMouseDownCaptures = SendEditor(2385, 0, 0)
End Function
' # Sets the cursor to one of the SC_CURSOR* values.
Public Sub SetCursor(cursorType As Long)
  Call SendEditor(2386, cursorType, 0)
End Sub
' # Get cursor type.
Public Function GetCursor() As Long
  GetCursor = SendEditor(2387, 0, 0)
End Function

' # If symbol is < 32, keep the drawn way, else, use the given character.
Public Sub SetControlCharSymbol(symbol As Long)
  Call SendEditor(2388, symbol, 0)
End Sub
' # Get the way control characters are displayed.
Public Function GetControlCharSymbol() As Long
  GetControlCharSymbol = SendEditor(2389, 0, 0)
End Function

' # Move to the previous change in capitalisation.
Public Sub WordPartLeft()
  Call SendEditor(2390, 0, 0)
End Sub
' # to new caret position.
Public Sub WordPartLeftExtend()
  Call SendEditor(2391, 0, 0)
End Sub
' # Move to the change next in capitalisation.
Public Sub WordPartRight()
  Call SendEditor(2392, 0, 0)
End Sub
' # to new caret position.
Public Sub WordPartRightExtend()
  Call SendEditor(2393, 0, 0)
End Sub
' # Constants for use with SetVisiblePolicy, similar to SetCaretPolicy.
' # is to be moved to by Find, FindNext, GotoLine, etc.
Public Sub SetVisiblePolicy(visiblePolicy As Long, visibleSlop As Long)
  Call SendEditor(2394, visiblePolicy, visibleSlop)
End Sub
' # Delete back from the current position to the start of the line.
Public Sub DelLineLeft()
  Call SendEditor(2395, 0, 0)
End Sub
' # Delete forwards from the current position to the end of the line.
Public Sub DelLineRight()
  Call SendEditor(2396, 0, 0)
End Sub
' # Get and Set the xOffset (ie, horizonal scroll position).
Public Sub SetXOffset(newOffset As Long)
  Call SendEditor(2397, newOffset, 0)
End Sub
Public Function GetXOffset() As Long
  GetXOffset = SendEditor(2398, 0, 0)
End Function

' # Set the last x chosen value to be the caret x position.
Public Sub ChooseCaretX()
  Call SendEditor(2399, 0, 0)
End Sub
' # GTK+ Specific.
Public Sub GrabFocus()
  Call SendEditor(2400, 0, 0)
End Sub
' # often dependent on that line.
' # and cannot go in the UZ if slop is set.
' # so the caret can move in the same direction longer before the policy is applied again.
' # where most code reside, and the lines after the caret, eg. the body of a function.
' # The exclusion zone is given in pixels.
Public Sub SetXCaretPolicy(caretPolicy As Long, caretSlop As Long)
  Call SendEditor(2402, caretPolicy, caretSlop)
End Sub
' # The exclusion zone is given in lines.
Public Sub SetYCaretPolicy(caretPolicy As Long, caretSlop As Long)
  Call SendEditor(2403, caretPolicy, caretSlop)
End Sub
' # Set printing to line wrapped (SC_WRAP_WORD) or not line wrapped (SC_WRAP_NONE).
Public Sub SetPrintWrapMode(mode As Long)
  Call SendEditor(2406, mode, 0)
End Sub
' # Is printing line wrapped?
Public Function GetPrintWrapMode() As Long
  GetPrintWrapMode = SendEditor(2407, 0, 0)
End Function

' # Set a fore colour for active hotspots.
Public Sub SetHotspotActiveFore(useSetting As Boolean, fore As Long)
  Call SendEditor(2410, useSetting, fore)
End Sub
' # Set a back colour for active hotspots.
Public Sub SetHotspotActiveBack(useSetting As Boolean, back As Long)
  Call SendEditor(2411, useSetting, back)
End Sub
' # Enable / Disable underlining active hotspots.
Public Sub SetHotspotActiveUnderline(underline As Boolean)
  Call SendEditor(2412, underline, 0)
End Sub
' # Limit hotspots to single line so hotspots on two lines don't merge.
Public Sub SetHotspotSingleLine(singleLine As Boolean)
  Call SendEditor(2421, singleLine, 0)
End Sub
' # Move caret between paragraphs (delimited by empty lines).
Public Sub ParaDown()
  Call SendEditor(2413, 0, 0)
End Sub
Public Sub ParaDownExtend()
  Call SendEditor(2414, 0, 0)
End Sub
Public Sub ParaUp()
  Call SendEditor(2415, 0, 0)
End Sub
Public Sub ParaUpExtend()
  Call SendEditor(2416, 0, 0)
End Sub
' # page into account. Returns 0 if passed 0.
' # page into account. Maximum value returned is the last position in the document.
' # Copy a range of text to the clipboard. Positions are clipped into the document.
Public Sub CopyRange(starts As Long, ends As Long)
  Call SendEditor(2419, starts, ends)
End Sub
' # Copy argument text to the clipboard.
Public Sub CopyText(length As Long, Text As String)
  Call SendEditor(2420, length, Text)
End Sub
' # by lines (SC_SEL_LINES).
Public Sub SetSelectionMode(mode As Long)
  Call SendEditor(2422, mode, 0)
End Sub
' # Get the mode of the current selection.
Public Function GetSelectionMode() As Long
  GetSelectionMode = SendEditor(2423, 0, 0)
End Function

' # Retrieve the position of the start of the selection at the given line (INVALID_POSITION if no selection on this line).
' # Retrieve the position of the end of the selection at the given line (INVALID_POSITION if no selection on this line).
' # Move caret down one line, extending rectangular selection to new caret position.
Public Sub LineDownRectExtend()
  Call SendEditor(2426, 0, 0)
End Sub
' # Move caret up one line, extending rectangular selection to new caret position.
Public Sub LineUpRectExtend()
  Call SendEditor(2427, 0, 0)
End Sub
' # Move caret left one character, extending rectangular selection to new caret position.
Public Sub CharLeftRectExtend()
  Call SendEditor(2428, 0, 0)
End Sub
' # Move caret right one character, extending rectangular selection to new caret position.
Public Sub CharRightRectExtend()
  Call SendEditor(2429, 0, 0)
End Sub
' # Move caret to first position on line, extending rectangular selection to new caret position.
Public Sub HomeRectExtend()
  Call SendEditor(2430, 0, 0)
End Sub
' # In either case, extend rectangular selection to new caret position.
Public Sub VCHomeRectExtend()
  Call SendEditor(2431, 0, 0)
End Sub
' # Move caret to last position on line, extending rectangular selection to new caret position.
Public Sub LineEndRectExtend()
  Call SendEditor(2432, 0, 0)
End Sub
' # Move caret one page up, extending rectangular selection to new caret position.
Public Sub PageUpRectExtend()
  Call SendEditor(2433, 0, 0)
End Sub
' # Move caret one page down, extending rectangular selection to new caret position.
Public Sub PageDownRectExtend()
  Call SendEditor(2434, 0, 0)
End Sub
' # Move caret to top of page, or one page up if already at top of page.
Public Sub StutteredPageUp()
  Call SendEditor(2435, 0, 0)
End Sub
' # Move caret to top of page, or one page up if already at top of page, extending selection to new caret position.
Public Sub StutteredPageUpExtend()
  Call SendEditor(2436, 0, 0)
End Sub
' # Move caret to bottom of page, or one page down if already at bottom of page.
Public Sub StutteredPageDown()
  Call SendEditor(2437, 0, 0)
End Sub
' # Move caret to bottom of page, or one page down if already at bottom of page, extending selection to new caret position.
Public Sub StutteredPageDownExtend()
  Call SendEditor(2438, 0, 0)
End Sub
' # Move caret left one word, position cursor at end of word.
Public Sub WordLeftEnd()
  Call SendEditor(2439, 0, 0)
End Sub
' # Move caret left one word, position cursor at end of word, extending selection to new caret position.
Public Sub WordLeftEndExtend()
  Call SendEditor(2440, 0, 0)
End Sub
' # Move caret right one word, position cursor at end of word.
Public Sub WordRightEnd()
  Call SendEditor(2441, 0, 0)
End Sub
' # Move caret right one word, position cursor at end of word, extending selection to new caret position.
Public Sub WordRightEndExtend()
  Call SendEditor(2442, 0, 0)
End Sub
' # Should be called after SetWordChars.
Public Sub SetWhitespaceChars(characters As String)
  Call SendEditor(2443, 0, characters)
End Sub
' # Reset the set of characters for whitespace and word characters to the defaults.
Public Sub SetCharsDefault()
  Call SendEditor(2444, 0, 0)
End Sub
' # Get currently selected item position in the auto-completion list
Public Function AutoCGetCurrent() As Long
  AutoCGetCurrent = SendEditor(2445, 0, 0)
End Function
' # Enlarge the document to a particular size of text bytes.
Public Sub Allocate(bytes As Long)
  Call SendEditor(2446, bytes, 0)
End Sub
' # Return the length in bytes.
Public Function TargetAsUTF8(S As String) As Long
  TargetAsUTF8 = SendEditor(2447, 0, S)
End Function
' # Set to -1 and the string will be measured to the first nul.
Public Sub SetLengthForEncode(bytes As Long)
  Call SendEditor(2448, bytes, 0)
End Sub
' # On error return 0.
Public Function EncodedFromUTF8(encoded As String) As Long
  EncodedFromUTF8 = SendEditor(2449, 0, encoded)
End Function
' # multi-byte characters. If beyond end of line, return line end position.
Public Function FindColumn(line As Long, Column As Long) As Long
  FindColumn = SendEditor(2456, line, Column)
End Function
' # Can the caret preferred x position only be changed by explicit movement commands?
Public Function GetCaretSticky() As Boolean
  GetCaretSticky = SendEditor(2457, 0, 0)
End Function
' # Stop the caret preferred x position changing when the user types.
Public Sub SetCaretSticky(useCaretStickyBehaviour As Boolean)
  Call SendEditor(2458, useCaretStickyBehaviour, 0)
End Sub
' # Switch between sticky and non-sticky: meant to be bound to a key.
Public Sub ToggleCaretSticky()
  Call SendEditor(2459, 0, 0)
End Sub
' # Enable/Disable convert-on-paste for line endings
Public Sub SetPasteConvertEndings(convert As Boolean)
  Call SendEditor(2467, convert, 0)
End Sub
' # Get convert-on-paste setting
Public Function GetPasteConvertEndings() As Boolean
  GetPasteConvertEndings = SendEditor(2468, 0, 0)
End Function
' # Duplicate the selection. If selection empty duplicate the line containing the caret.
Public Sub SelectionDuplicate()
  Call SendEditor(2469, 0, 0)
End Sub
' # Start notifying the container of all key presses and commands.
Public Sub StartRecord()
  Call SendEditor(3001, 0, 0)
End Sub
' # Stop notifying the container of all key presses and commands.
Public Sub StopRecord()
  Call SendEditor(3002, 0, 0)
End Sub
' # Set the lexing language of the document.
Public Sub SetLexer(Lexer As Long)
  Call SendEditor(4001, Lexer, 0)
End Sub
' # Retrieve the lexing language of the document.
Public Function GetLexer() As Long
  GetLexer = SendEditor(4002, 0, 0)
End Function

' # Colourise a segment of the document using the current lexing language.
Public Sub Colourise(starts As Long, ends As Long)
  Call SendEditor(4003, starts, ends)
End Sub
' # Set up a value that may be used by a lexer for some optional feature.
Public Sub SetProperty(Key As String, Value As String)
  Dim l1 As Long, l2 As Long
  Dim bKey() As Byte
  bKey = StrConv(Key, vbFromUnicode)
  ReDim Preserve bKey(0 To UBound(bKey) + 1) As Byte
  Dim bValue() As Byte
  bValue = StrConv(Value, vbFromUnicode)
  ReDim Preserve bValue(0 To UBound(bValue) + 1) As Byte
  SendMessage SCI, SCI_SETPROPERTY, ByVal VarPtr(bKey(0)), ByVal VarPtr(bValue(0))
End Sub

' # Maximum value of keywordSet parameter of SetKeyWords.
' # Set up the key words used by the lexer.
Public Sub SetKeyWords(keywordSet As Long, Keywords As String)
  Call SendEditor(4005, keywordSet, Keywords)
End Sub
' # Set the lexing language of the document based on string name.
Public Sub SetLexerLanguage(language As String)
  Call SendEditor(4006, 0, language)
End Sub
' # Load a lexer library (dll / so).
Public Sub LoadLexerLibrary(Path As String)
  Call SendEditor(4007, 0, Path)
End Sub
' # Retrieve a "property" value previously set with SetProperty.
Public Function GetProperty(Buf As String) As Long
  GetProperty = SendEditor(4008, 0, Buf)
End Function
' # with "$()" variable replacement on returned buffer.
Public Function GetPropertyExpanded(Buf As String) As Long
  GetPropertyExpanded = SendEditor(4009, 0, Buf)
End Function
' # interpreted as an int AFTER any "$()" variable replacement.
Public Function GetPropertyInt() As Long
  GetPropertyInt = SendEditor(4010, 0, 0)
End Function

' # Retrieve the number of bits the current lexer needs for styling.
Public Function GetStyleBitsNeeded() As Long
  GetStyleBitsNeeded = SendEditor(4011, 0, 0)
End Function

' # One bit is set from each of SC_MOD_* and SC_PERFORMED_*.
' # As clients depend on these constants, this will not be changed.
' # Extended keys above 300.
' # For SciLexer.h
' # value assigned in sequence from SCLEX_AUTOMATIC+1.
' # Lexical states for SCLEX_PYTHON
' # Lexical states for SCLEX_CPP
' # Lexical states for SCLEX_HTML, SCLEX_XML
' # XML and ASP
' # More HTML
' # X-Code
' # SGML
' # Embedded Javascript
' # ASP Javascript
' # Embedded VBScript
' # ASP VBScript
' # Embedded Python
' # PHP
' # ASP Python
' # PHP
' # Lexical states for SCLEX_PERL
' # Lexical states for SCLEX_RUBY
' # Lexical states for SCLEX_VB, SCLEX_VBSCRIPT, SCLEX_POWERBASIC
' # Lexical states for SCLEX_PROPERTIES
' # Lexical states for SCLEX_LATEX
' # Lexical states for SCLEX_LUA
' # Lexical states for SCLEX_ERRORLIST
' # Lexical states for SCLEX_BATCH
' # Lexical states for SCLEX_MAKEFILE
' # Lexical states for SCLEX_DIFF
' # Lexical states for SCLEX_CONF (Apache Configuration Files Lexer)
' # Lexical states for SCLEX_AVE, Avenue
' # Lexical states for SCLEX_ADA
' # Lexical states for SCLEX_BAAN
' # Lexical states for SCLEX_LISP
' # Lexical states for SCLEX_EIFFEL and SCLEX_EIFFELKW
' # Lexical states for SCLEX_NNCRONTAB (nnCron crontab Lexer)
' # Lexical states for SCLEX_FORTH (Forth Lexer)
' # Lexical states for SCLEX_MATLAB
' # single quoted string
' # Lexical states for SCLEX_SCRIPTOL
' # Lexical states for SCLEX_ASM
' # Lexical states for SCLEX_FORTRAN
' # Lexical states for SCLEX_CSS
' # Lexical states for SCLEX_POV
' # Lexical states for SCLEX_LOUT
' # Lexical states for SCLEX_ESCRIPT
' # Lexical states for SCLEX_PS
' # Lexical states for SCLEX_NSIS
' # Lexical states for SCLEX_MMIXAL
' # Lexical states for SCLEX_CLW
' # Lexical states for SCLEX_LOT
' # Lexical states for SCLEX_YAML
' # Lexical states for SCLEX_TEX
' # Lexical states for SCLEX_ERLANG
' # Lexical states for SCLEX_OCTAVE are identical to MatLab
' # Lexical states for SCLEX_MSSQL
' # Lexical states for SCLEX_VERILOG
' # Lexical states for SCLEX_KIX
' # Lexical states for SCLEX_GUI4CLI
' # Lexical states for SCLEX_SPECMAN
' # Lexical states for SCLEX_AU3
' # Lexical states for SCLEX_APDL
' # Lexical states for SCLEX_BASH
' # Lexical states for SCLEX_ASN1
' # Lexical states for SCLEX_VHDL
' # Lexical states for SCLEX_CAML
' # Lexical states for SCLEX_HASKELL
' # Lexical states of SCLEX_TADS3
' # Lexical states for SCLEX_REBOL
' # Lexical states for SCLEX_SQL
' # Lexical states for SCLEX_SMALLTALK
' # Lexical states for SCLEX_FLAGSHIP (clipper)
' # Lexical states for SCLEX_CSOUND
' # Events
' # CARET_POLICY changed in 1.47
Public Sub SetCaretPolicy(caretPolicy As Long, caretSlop As Long)
  Call SendEditor(2369, caretPolicy, caretSlop)
End Sub
' # The old name for SCN_UPDATEUI


'#######################################################################
'######################## End Autogenerated Code #####################
'#######################################################################

